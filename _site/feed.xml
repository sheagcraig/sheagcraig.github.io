<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Taco Destroyer</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml" />
<link rel="alternate" type="text/html" href="http://localhost:4000" />
<updated>2015-10-01T12:22:35-04:00</updated>
<id>http://localhost:4000/</id>
<author>
  <name>Your Name</name>
  <uri>http://localhost:4000/</uri>
  <email>you@email.com</email>
</author>


  

<entry>
  <title type="html"><![CDATA[Welcome to Jekyll!]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/jekyll/update/welcome-to-jekyll/" />
  <id>http://localhost:4000/jekyll/update/welcome-to-jekyll</id>
  <published>2015-10-01T06:15:15-04:00</published>
  <updated>2015-10-01T06:15:15-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/jekyll/update/welcome-to-jekyll/&quot;&gt;Welcome to Jekyll!&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on October 01, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Putting the Hopper to Work: Broken Preferences Edition]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/putting-the-hopper-to-work-broken-preferences-edition/" />
  <id>http://localhost:4000/putting-the-hopper-to-work-broken-preferences-edition</id>
  <published>2015-08-11T15:24:05-04:00</published>
  <updated>2015-08-11T15:24:05-04:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/08/ecf1b5c2b2d2930afe3e7285ceb0825c.jpg&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/08/ecf1b5c2b2d2930afe3e7285ceb0825c.jpg&quot; alt=&quot;ecf1b5c2b2d2930afe3e7285ceb0825c&quot; /&gt;&lt;/a&gt;
Just a quick one:
Today I was trying to replace a preference file that we install via a package
with a profile. It just didn’t work. Restore the plist file and it worked fine.
This mystified me, and initially I thought I was just doing something wrong.
And then I had an inkling of what could be happening.&lt;/p&gt;

&lt;p&gt;I tossed the binary for the software-in-question into the Hopper dissambler and
started searching for references to CFPreferences and to the path for the plist
file. Sure enough, I was able to follow through the code and determine that the
software created a proper plist, but that it was manually creating and reading
that plist file; it didn’t use the preferences system to &lt;em&gt;get&lt;/em&gt; its preferences.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/08/Gotcha.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/08/Gotcha.png&quot; alt=&quot;Gotcha&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/putting-the-hopper-to-work-broken-preferences-edition/&quot;&gt;Putting the Hopper to Work: Broken Preferences Edition&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on August 11, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[MathJax Example]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/mathjax-example/" />
  <id>http://localhost:4000/blog/mathjax-example</id>
  <published>2015-08-10T08:08:50-04:00</published>
  <updated>2015-08-10T08:08:50-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://www.mathjax.org/&quot;&gt;MathJax&lt;/a&gt; is a simple way of including Tex/LaTex/MathML based mathematics in HTML webpages. To get up and running you need to include the MathJax script in the header of your github pages page, and then write some maths. For LaTex, there are two delimiters you need to know about, one for block or displayed mathematics &lt;code&gt;\[ ... \]&lt;/code&gt;, and the other for inline mathematics &lt;code&gt;\( ... \)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;usage&quot;&gt;Usage&lt;/h2&gt;

&lt;p&gt;To enable MathJax support be sure Kramdown is your Markdown flavor of choice and MathJax is set to true in your &lt;code&gt;_config.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;markdown: kramdown
mathjax: true
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;Here is an example MathJax inline rendering \\( 1/x^{2} \\), and here is a block rendering: 
\\[ \frac{1}{n^{2}} \\]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is an example MathJax inline rendering \( 1/x^{2} \), and here is a block rendering: 
\[ \frac{1}{n^{2}} \]&lt;/p&gt;

&lt;p&gt;The only thing to look out for is the escaping of the backslash when using markdown, so the delimiters become &lt;code&gt;\\[ ... \\]&lt;/code&gt; and &lt;code&gt;\\( ... \\)&lt;/code&gt; for inline and block maths respectively.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/mathjax-example/&quot;&gt;MathJax Example&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on August 10, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Now I get it... Updating Mac firmware]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/now-i-get-it-updating-mac-firmware/" />
  <id>http://localhost:4000/now-i-get-it-updating-mac-firmware</id>
  <published>2015-07-16T15:38:24-04:00</published>
  <updated>2015-07-16T15:38:24-04:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/07/Spinal-Tap-Harry-Shearer.jpg&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/07/Spinal-Tap-Harry-Shearer.jpg&quot; alt=&quot;Spinal-Tap-Harry-Shearer&quot; /&gt;&lt;/a&gt;
Perusing &lt;a href=&quot;https://www.afp548.com/2015/03/05/thunderstrike-need-to-know/&quot;&gt;Allister Banks’ look into Thunderstrike vulnerability&lt;/a&gt; it didn’t quite click for me at first what I was looking at.&lt;/p&gt;

&lt;p&gt;The condensed version that I finally was able to tease out was that you can get yourself into a situation where you:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Have some machines with old, unpatched firmware&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You build an image with AutoDmg or some other method to upgrade those machines (in our case, we went from 10.9.5 to 10.10.4 during the summer vacation)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The machine retains the old, unpatched firmware.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The reason for this is that the FirmwareUpdate part of the combo updater isn’t included in the images built by AutoDMG. If you instead update through the App Store/SUS, part of the update process includes patching the firmware.&lt;/p&gt;

&lt;p&gt;Upon delivering the next point update, the firmware would probably get updated. Probably.&lt;/p&gt;

&lt;p&gt;In terms of Thunderstrike vulnerability, you only need to have a newer firmware version than as detected in this &lt;a href=&quot;https://gist.github.com/sheagcraig/962b1ec99882b80d03dc#file-thunderstrikevulnerabilityea-py&quot;&gt; extension attribute&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So the final word is, if you’re imaging machines with out-of-date firmware, and you care about the firmware being up-to-date, AND you don’t have pending point updates to apply, you can go grab the FirmwareUpdate.pkg package from the most recent OS X combo updater in your SUS and install it on the affected machines.&lt;/p&gt;

&lt;p&gt;You can find this update by looking in your SUS, which is of course Reposado…&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;find /path/to/reposado -name &quot;OSXUpdCombo*&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;…will give you the paths to whatever OS X combo updaters you still have kicking around. Within (probably the newest one) you’ll find the FirmwareUpdate.pkg you seek.&lt;/p&gt;

&lt;p&gt;For example, the 10.10.4 one is here: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/reposado/html/content/downloads/02/26/031-25777/01sza4ly2cuww3yxfpsbeov51p5n3v7l87/FirmwareUpdate.pkg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package safely does nothing if a machine is already up-to-date, or if the package is actually too old, so there’s no harm in a speculative or better-safe-than-sorry run (or two).&lt;/p&gt;

&lt;p&gt;Hopefully this is an infrequent circumstance. And you could find yourself in a circumstance where a firmware that ships with a machine is newer than the most recent OS X update contains. That firmware will probably be a part of the &lt;em&gt;next&lt;/em&gt; update, but you might not want to wait.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/now-i-get-it-updating-mac-firmware/&quot;&gt;Now I get it... Updating Mac firmware&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on July 16, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How I Roll]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/how-i-roll/" />
  <id>http://localhost:4000/how-i-roll</id>
  <published>2015-06-25T09:22:53-04:00</published>
  <updated>2015-06-25T09:22:53-04:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;I use a mouse or trackpad all day. Don’t get me wrong, I don’t hate those
devices.&lt;/p&gt;

&lt;p&gt;But I don’t like repetitive click-click-click workflows, of any kind.
Especially in a webpage that has to refresh. Too error prone, too mind-numbing!&lt;/p&gt;

&lt;p&gt;Today I had to remove some computers from our Casper JSS that we sold. Yes, I
could just click each one and  hit delete. Or yes, I could make the appropriate
search and then perform an “Action/Delete Comptuers”. But I didn’t write
python-jss to click around in a web form!&lt;/p&gt;

&lt;p&gt;First I grabbed all of the computers from the lab we sold:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ms503&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Computer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;MS503&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rather than pull the full record for each computer on the JSS, which is costly
(time-intensive), I did this preliminary list first. So, it grabbed all
computers whose name starts with “MS503”, regardless of case.&lt;/p&gt;

&lt;p&gt;We already have new computers in place with duplicate names; thus, the
comprehension uses name for the name matching, but pulls the full record using
the id property. Otherwise, the JSS returns the first result with that name,
even though there may be more than one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Then&lt;/em&gt; I filtered the list down just to the two older-model iMacs which were in
the first list:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;old_ms503&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ms503&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hardware/model&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rsplit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;(&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rstrip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Early 2009&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Mid 2007&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is admittedly an ugly chain of rsplit/rstrip to get the model name. If it weren’t just for expediency I would probably write a regex to do the job.&lt;/p&gt;

&lt;p&gt;From there, it’s a simple:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old_ms503&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    	&lt;span class=&quot;n&quot;&gt;computer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So fresh and so clean!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/how-i-roll/&quot;&gt;How I Roll&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on June 25, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Expanding Text Replacement in JSSImporter]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/expanding-text-replacement-in-jssimporter/" />
  <id>http://localhost:4000/expanding-text-replacement-in-jssimporter</id>
  <published>2015-04-01T14:54:02-04:00</published>
  <updated>2015-04-01T14:54:02-04:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;After some PR’s and ideas tossed around with other admins using JSSImporter, it became pretty clear that there are a lot of creative uses of JSSImporter that the original code doesn’t make very easy, or possible, without some hacking.&lt;/p&gt;

&lt;p&gt;One big change that comes with JSSImporter 0.3.8 is that it allows you to use any string-type AutoPkg environment variable in your template text substitutions.&lt;/p&gt;

&lt;p&gt;To use a variable for text substitution, just wrap it in %’s in the template file. For example, if I wanted to include the value of AUTOPKG_VERSION as part of a description in my policy template, I could do this (only the relevant parts of the XML are included for brevity!)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;description&amp;gt;Built with AutoPkg version %AUTOPKG_VERSION% for your pleasure!&amp;lt;/description&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;One thing that many people don’t realize is that AutoPkg doesn’t freak out if you add arguments or input variables to your recipe that don’t “exist”. You can use this to fill arguments to the JSSImporter as well as templates; you don’t necessarily need an argument for every conceivable setting. For example, say I want to have a second smart group scoped in my policy, but I want the name to be overrideable with input variables.&lt;/p&gt;

&lt;p&gt;First I would add a new input variable named something appropriately:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;key&amp;gt;Input&amp;lt;/key&amp;gt;
&amp;lt;dict&amp;gt;
	&amp;lt;key&amp;gt;SecondGroupName&amp;lt;/key&amp;gt;
	&amp;lt;string&amp;gt;SuperTesters&amp;lt;/string&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then, later, in the JSSImporter arguments, in the groups array, I could have my second group use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;                &amp;lt;key&amp;gt;groups&amp;lt;/key&amp;gt;
                &amp;lt;array&amp;gt;
                    &amp;lt;dict&amp;gt;
                        &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;
                        &amp;lt;string&amp;gt;%GROUP_NAME%&amp;lt;/string&amp;gt;
                        &amp;lt;key&amp;gt;smart&amp;lt;/key&amp;gt;
                        &amp;lt;true&amp;gt;&amp;lt;/true&amp;gt;
                        &amp;lt;key&amp;gt;template_path&amp;lt;/key&amp;gt;
                        &amp;lt;string&amp;gt;%GROUP_TEMPLATE%&amp;lt;/string&amp;gt;
                    &amp;lt;/dict&amp;gt;
                    &amp;lt;dict&amp;gt;
                        &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;
                        &amp;lt;string&amp;gt;%SecondGroupName%&amp;lt;/string&amp;gt;
                        &amp;lt;key&amp;gt;smart&amp;lt;/key&amp;gt;
                        &amp;lt;true&amp;gt;&amp;lt;/true&amp;gt;
                        &amp;lt;key&amp;gt;template_path&amp;lt;/key&amp;gt;
                        &amp;lt;string&amp;gt;%GROUP_TEMPLATE2%&amp;lt;/string&amp;gt;
                    &amp;lt;/dict&amp;gt;
                &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;and&lt;/em&gt; I can include that somewhere in a template as well. So my policy template could include this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;policy&amp;gt;
    &amp;lt;general&amp;gt;
        &amp;lt;name&amp;gt;Install Latest %PROD_NAME%&amp;lt;/name&amp;gt;
        &amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;
        &amp;lt;frequency&amp;gt;Ongoing&amp;lt;/frequency&amp;gt;
        &amp;lt;category&amp;gt;
            &amp;lt;name&amp;gt;%POLICY_CATEGORY%&amp;lt;/name&amp;gt;
        &amp;lt;/category&amp;gt;
    &amp;lt;/general&amp;gt;
    &amp;lt;scope&amp;gt; 
        
    &amp;lt;/scope&amp;gt;
    &amp;lt;package_configuration&amp;gt;
        
    &amp;lt;/package_configuration&amp;gt;
    &amp;lt;scripts&amp;gt;
        
    &amp;lt;/scripts&amp;gt;
    &amp;lt;self_service&amp;gt;
        &amp;lt;use_for_self_service&amp;gt;true&amp;lt;/use_for_self_service&amp;gt;
        &amp;lt;install_button_text&amp;gt;Install %VERSION%&amp;lt;/install_button_text&amp;gt;
        &amp;lt;self_service_description&amp;gt;%SELF_SERVICE_DESCRIPTION%&amp;lt;/self_service_description&amp;gt;
    &amp;lt;/self_service&amp;gt;
    &amp;lt;maintenance&amp;gt;
        &amp;lt;recon&amp;gt;true&amp;lt;/recon&amp;gt;
    &amp;lt;/maintenance&amp;gt;
    &amp;lt;user_interaction&amp;gt;
        &amp;lt;message_start&amp;gt;Greetings %SecondGroupName%&amp;lt;/message_start&amp;gt;
        &amp;lt;allow_users_to_defer&amp;gt;false&amp;lt;/allow_users_to_defer&amp;gt;
        &amp;lt;allow_deferral_until_utc&amp;gt;&amp;lt;/allow_deferral_until_utc&amp;gt;
        &amp;lt;message_finish&amp;gt;&amp;lt;/message_finish&amp;gt;
    &amp;lt;/user_interaction&amp;gt;
&amp;lt;/policy&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Granted, that’s kind of a contrived use, but it points to a way to manage a lot of settings with a pretty flexible ability to later override things.&lt;/p&gt;

&lt;p&gt;Which reminds me: Try to set all of the arguments to JSSImporter in your recipes with input variables. This makes it a lot easier for other people to then borrow your recipe and make it work in their environment. Indeed, once we get it off the ground, this will be a style requirement for the “official” JSS recipes repo… Stay tuned.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/expanding-text-replacement-in-jssimporter/&quot;&gt;Expanding Text Replacement in JSSImporter&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on April 01, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Shout out!]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/shout-out/" />
  <id>http://localhost:4000/shout-out</id>
  <published>2015-03-30T08:24:35-04:00</published>
  <updated>2015-03-30T08:24:35-04:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/6627494917_c093c2f68a.jpg&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/6627494917_c093c2f68a.jpg&quot; alt=&quot;6627494917_c093c2f68a&quot; /&gt;&lt;/a&gt;
Check out: &lt;a href=&quot;https://onemoreadmin.wordpress.com/2015/03/26/using-luggage-outset-and-yo-for-awesome-user-notifications/&quot;&gt;using-luggage-outset-and-yo-for-awesome-user-notifications&lt;/a&gt; for a sweet usage of yo, my recent Swift user notification app.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/shout-out/&quot;&gt;Shout out!&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on March 30, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[How We Are Removing Adware]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/how-we-are-removing-adware/" />
  <id>http://localhost:4000/how-we-are-removing-adware</id>
  <published>2015-03-25T12:23:21-04:00</published>
  <updated>2015-03-25T12:23:21-04:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Over the last few months the number of mac laptops at our organization with adware infections has slowly gone from nonexistent, to a slow trickle, to, prior to the amelioration I’m about to describe, about 10% of our managed macs having some blacklisted file present.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt;All you reckless folks using 9.7 already, guess what? The “Execute Command” described below doesn’t work. Stand by for a way to do this using a script that is bulletproof.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; It turns out that if you try to run yo from a Casper policy using the Files and Processes/Execute Command task, yo will run, but never do anything. I don’t quite grasp why this is, because it works if you login or ssh in and do sudo jamf policy, but not if the trigger runs “naturally. Fortunately @golby and I figured out an alternate. Use &lt;code&gt;open /Applications/Utilities/yo.app --args -t &quot;Adware Detected&quot;&lt;/code&gt; as your command (substitute your desired arguments of course!). Updated in the post below as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; People have been really enthusiastic about both &lt;a href=&quot;https://github.com/sheagcraig/yo&quot;&gt;yo&lt;/a&gt; and the AdwareCheck extension attribute. So I started expanding AdwareCheck into something even better. Check out &lt;a href=&quot;https://github.com/sheagcraig/SavingThrow&quot;&gt;SavingThrow&lt;/a&gt; for more power!&lt;/p&gt;

&lt;p&gt;I blogged about the first one of these adware packages that we’ve had to deal with: &lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/2015/01/21/cleaning-up-stupid-mac-malware-projectx/&quot;&gt;here&lt;/a&gt;. Researching that, while fun, was also time consuming. Fortunately, Apple just released &lt;a href=&quot;https://support.apple.com/en-us/ht203987&quot;&gt;an article&lt;/a&gt; detailing files to look for and procedures to use to remove common adware programs.&lt;/p&gt;

&lt;p&gt;My todo list included several items like “write an extension attribute to detect projectX” and “write automated removal script for projectX”. With Apple’s KBase article, the research was all done; I just had to implement it.&lt;/p&gt;

&lt;p&gt;And then, the prolific &lt;a href=&quot;http://krypted.com/wp-content/uploads/2015/03/Allister.gif&quot;&gt;Allister Banks&lt;/a&gt; taunted me with his solution to detecting adware as an extension attribute. This was the kick in the butt I needed.&lt;/p&gt;

&lt;p&gt;So I wrote a quick one up myself that also adds in the ability to remove the files. You can check it out &lt;a href=&quot;https://gist.github.com/sheagcraig/69a473f00ce434fffd5b&quot;&gt;HERE&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But that’s just the first piece of the puzzle. Now, what do we do with it? How can you implement this procedure yourself?&lt;/p&gt;

&lt;p&gt;First off, this procedure is based around us using the Casper Suite to manage our fleet, but it is conceivable to use this method as a template for applying to any other management system.&lt;/p&gt;

&lt;p&gt;First, I added the AdwareCheckExtensionAttribute.py script to our JSS via the Management Settings/Computer Management/Extension Attributes menu:
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Extension_Attributes.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Extension_Attributes.png&quot; alt=&quot;Extension_Attributes&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Extension_Attribute_AdwarePresent.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Extension_Attribute_AdwarePresent.png&quot; alt=&quot;Edit_Extension_Attribute_AdwarePresent&quot; /&gt;&lt;/a&gt;
Check the above screenshot for the correct extension attribute settings!&lt;/p&gt;

&lt;p&gt;Next, I created a smart group to collect computers which had been identified as &lt;em&gt;infected by dirty adware&lt;/em&gt;:
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Screen-Shot-2015-03-25-at-11.31.28-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Screen-Shot-2015-03-25-at-11.31.28-AM.png&quot; alt=&quot;Screen Shot 2015-03-25 at 11.31.28 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice, the criteria is that the value of AdwarePresent is &lt;em&gt;like&lt;/em&gt; True. This is because the extension attribute also reports back which specific files were found, so it will never report back &lt;em&gt;exactly&lt;/em&gt; True.
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/ST-Loaner06.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/ST-Loaner06.png&quot; alt=&quot;ST-Loaner06&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a nice added feature for IT; we like to be able to see what exactly the user has acquired in their web surfing.&lt;/p&gt;

&lt;p&gt;At this point, after computers start to recon, you should start to see some results! Who has been handing out their admin privileges willy-nilly?&lt;/p&gt;

&lt;p&gt;Now, on to how to excise the infection!&lt;/p&gt;

&lt;p&gt;As a group, we decided to force the users to have to manually remove the adware themselves. We felt that, unlike many of the Windows crapware that we see, our Mac users had to actively authenticate and install these adware programs, and this was our opportunity to do some targeted training. While we could have automatically detected the adware and removed it without them ever knowing, we felt like it was better to force them to become aware of the situation.&lt;/p&gt;

&lt;p&gt;I have been working on another little project that displays OS X user notifications. terminal-notifier already does this, but it does so rather politely. I wanted a notification that wouldn’t go away until the user interacted with it. So I wrote &lt;a href=&quot;https://github.com/sheagcraig/yo&quot;&gt;yo&lt;/a&gt; in Swift. The project includes an already built app that you can grab and install with no screwing around. If you really really really want to use your organization’s logo or some other icon AND ONLY that icon, yo has a README that details the process of changing this icon and building the project.&lt;/p&gt;

&lt;p&gt;The next step, then, was to craft a policy to install the yo app to /Applications/Utilities on our fleet. I made a custom-build for our organization that uses our logo, and deployed it across campus. Once that was safely in place, it was time to remove some adware.&lt;/p&gt;

&lt;p&gt;First, add the AdwareCheckExtensionAttribute.py file to your scripts through Casper Admin or the Management/Computer Management/Scripts page so that it’s available for your policy.&lt;/p&gt;

&lt;p&gt;The next step was to create a Self Service policy named “Remove Adware”. Please take a close look at the screenshots for the exact settings, and I’ll detail the important bits below.
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware.png&quot; alt=&quot;Edit_Policy_Remove_Adware&quot; /&gt;&lt;/a&gt;
Create a new policy, naming it something appropriate (Remove Adware?). Make sure that it doesn’t trigger off of any of the general page triggers, since it will be a self-service policy.&lt;/p&gt;

&lt;p&gt;The frequency should be “Ongoing” because you want the policy to be available as long as the user’s computer tests True for Adware.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-2.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-2.png&quot; alt=&quot;Edit_Policy_Remove_Adware 2&quot; /&gt;&lt;/a&gt;
In the “Scripts” section, select the AdwareCheckExtensionAttribute.py script and set the “Parameter 4” value to “
–remove”. This is how the script knows its in removal mode vs. extension attribute mode.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-4.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-4.png&quot; alt=&quot;Edit_Policy_Remove_Adware 4&quot; /&gt;&lt;/a&gt;
Next, add a Maintenance/Update Inventory task to the policy so that the computer has a chance to drop out of the smart group.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-3.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-3.png&quot; alt=&quot;Edit_Policy_Remove_Adware 3&quot; /&gt;&lt;/a&gt;
Finally, set the Maintenance/User Logged In Action to “Restart Immediately”. Since some of the adware has multiple launchd jobs running, and it’s complicated to remove them in the “correct” order, it’s much easier to just force a restart on the user. (This will be addressed to the user in the Self Service section to come…)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-5.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-5.png&quot; alt=&quot;Edit_Policy_Remove_Adware 5&quot; /&gt;&lt;/a&gt;
Scope the policy to the smart group you created above.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-6.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Remove_Adware-6.png&quot; alt=&quot;Edit_Policy_Remove_Adware 6&quot; /&gt;&lt;/a&gt;
Finally, in the Self Service tab, select “Make the policy available in Self Service” toggle. I also set the button name and icon to be more helpful.&lt;/p&gt;

&lt;p&gt;I put in a short description of what would happen, and, importantly, that it would require a restart. I also selected the “Ensure that users view description” to make sure that they are forced to “read” this description. I put “read” in quotation marks because they won’t necessarily read it, but it’s the best we can do!&lt;/p&gt;

&lt;p&gt;Checking the “Feature the policy on the main page” button puts the policy front and center for infected users. The best part is that this policy won’t show up for computers not in the smart group, so you don’t have to worry about it interfering with “normal” operation.&lt;/p&gt;

&lt;p&gt;Once the self service policy has been created, anyone in the Adware smart group can now remove their adware. Once all of the preceding work is done, the last step is to notify the users that they have adware, hopefully directing them towards Self Service.&lt;/p&gt;

&lt;p&gt;Create one final policy, titled “Notify Users of Adware” or something similar.
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Notify_user_of_Adware1.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Notify_user_of_Adware1.png&quot; alt=&quot;Edit_Policy_Notify_user_of_Adware&quot; /&gt;&lt;/a&gt;
Here, I selected the Recurring Check-In trigger. The notification won’t fire off if the user is not logged in (*which I could handle better in yo…), and it also won’t work if we use the Login trigger, since it occurs before the UI is fully set up. Trust me-recurring check-in is fine!
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Notify_user_of_Adware.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Edit_Policy_Notify_user_of_Adware.png&quot; alt=&quot;Edit_Policy_Notify_user_of_Adware&quot; /&gt;&lt;/a&gt;
Next, set up a Maintenance/Execute Command task with the following call to yo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;open /Applications/Utilities/yo.app --args -t &#39;Adware detected&#39; -b &#39;Clean&#39; -n &#39;Please remove with Self Service: Remove Adware.&#39; -a &#39;/Applications/Self Service.app&#39;;logger &#39;Sending adware notification.&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;-t&lt;/code&gt; argument is the notification’s title, the &lt;code&gt;-b&lt;/code&gt; sets the text on the action button, and the &lt;code&gt;-n&lt;/code&gt; argument sets the body text on the notification. The &lt;code&gt;-a&lt;/code&gt; is a path to the Self Service app. This is passed to the &lt;code&gt;/usr/bin/open&lt;/code&gt; commandline program as an argument; in our case, it says that, when someone clicks on the notification’s “action” button (titled “Clean” in this example), Self Service should be opened. The extra logger command at the end has the dual purpose of logging to the system log and ensuring that our policy exits 0, rather than failing due to a mysterious error.
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Screen-Shot-2015-04-01-at-2.11.46-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Screen-Shot-2015-04-01-at-2.11.46-PM.png&quot; alt=&quot;Screen Shot 2015-04-01 at 2.11.46 PM&quot; /&gt;&lt;/a&gt;
And lastly, scope the policy to our adware smart group.&lt;/p&gt;

&lt;p&gt;Once you hit save, computers who have been added to the smart group after their last recon determined that they had an adware infection will have a policy scoped to them to pop the notification on screen.
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Screen-Shot-2015-04-01-at-2.06.12-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/Screen-Shot-2015-04-01-at-2.06.12-PM.png&quot; alt=&quot;Screen Shot 2015-04-01 at 2.06.12 PM&quot; /&gt;&lt;/a&gt;
They can then click on the clean button, authenticate Self Service, and run the Clean Adware policy to clean and reboot their computer.
[![Self_Service_and_How_We_Are_Removing_Adware&lt;strong&gt;&lt;em&gt;Shea_Craig](http://labs.da.org/wordpress/sheagcraig/files/2015/03/Self_Service_and_How_We_Are_Removing_Adware&lt;/em&gt;__Shea_Craig.png)](http://labs.da.org/wordpress/sheagcraig/files/2015/03/Self_Service_and_How_We_Are_Removing_Adware&lt;/strong&gt;_Shea_Craig.png)&lt;/p&gt;

&lt;p&gt;This is all well and good… But to take it to the next level, maybe I’ll write a JSS recipe so that you can AutoPkg/JSSImporter this entire procedure to your JSS with no other work than running the recipe.
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/tumblr_n0dspuc1Yx1trues8o1_500.gif&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/03/tumblr_n0dspuc1Yx1trues8o1_500.gif&quot; alt=&quot;tumblr_n0dspuc1Yx1trues8o1_500&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/how-we-are-removing-adware/&quot;&gt;How We Are Removing Adware&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on March 25, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Cleaning up stupid Mac malware: "ProjectX"]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/cleaning-up-stupid-mac-malware-projectx/" />
  <id>http://localhost:4000/cleaning-up-stupid-mac-malware-projectx</id>
  <published>2015-01-21T15:40:54-05:00</published>
  <updated>2015-01-21T15:40:54-05:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/V.jpg&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/V.jpg&quot; alt=&quot;V&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;&quot;Becoming is certainly not imitating, or identifying with something; neither is it regressing-progressing; neither is it corresponding, establishing corresponding relations; neither is it producing, producing a filiation or producing through filiation. Becoming is a verb with a consistency all its own; it does not reduce to, or lead back to, appearing,&quot;&lt;/blockquote&gt;

&lt;p&gt;– Gilles Deluze and Félix Guattari, A Thousand Plateaus&lt;/p&gt;

&lt;p&gt;I thought it would be useful to describe the research and removal process of a recent support case involving a faculty member who had inadvertently gotten some malware. What I didn’t realize was the strange story of becoming and identity hidden in this seemingly simple procedure. I didn’t expect to be thrown into confusion at the mysterious person, identified in many ways throughout the course of my investigation, but most interestingly so, as simply “V”.&lt;/p&gt;

&lt;p&gt;All of our laptop users, both faculty and student, have administrative rights on their laptops. This is an important decision to us, and we feel strongly about continuing to grant those privileges. However, sometimes users can get into trouble, particularly when it comes to misleading software offering to be “helpful”, as we will see. It is this administrative privilege which can lead to serious issues. Fortunately, the malware involved in this particular instance is pretty stupid. I know if I was a dirtbag malware author and I was granted admin privileges as part of a software installation process, I can think of a lot better things to do than to just hijack Webkit’s default search engine and home page…&lt;/p&gt;

&lt;p&gt;When I received the laptop, it had a ton of junky popup-laden websites with audio informing me that this laptop was infected with a virus, and I should call a phone number right away. After working with the laptop a little bit, it became apparent that the symptoms were  limited to Chrome and Safari, and were:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;An inability to set and retain a HomePage after browser restarts.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Search omnibar set to Google in preferences, yet getting sent to Yahoo.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;eCommerce sites like Amazon have an obtrusive overlay of other products from an unrelated site.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;All cookies are accepted. If preference is changed, it gets reset to allow all cookies upon browser restart.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have cleaned several of these things in the last few weeks, so clearly I can expect to see more in the future. This one in particular was masquerading as an FLV video player. I imagine the user found a video somewhere and couldn’t figure out how to play it. (I haven’t been able to figure out where or what the user searched for). “FLVPlayer1” was there to help.&lt;/p&gt;

&lt;p&gt;The user downloaded the disk image, mounted it, and ran the “installer” app contained within. Soon after, the user found that Safari and Chrome both kept setting the home page, despite reset/quit/restart cycles, to “www.only-search.com”. Also, searches from the omnibar were redirected to “only-search”, despite the preferences clearly stating that Google was the default search engine.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.26.29-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.26.29-AM-300x249.png&quot; alt=&quot;Screen Shot 2015-01-21 at 10.26.29 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Astute users would probably notice right away that this doesn’t look like a standard installer package or drag-n-drop application wrapped in a dmg. Because it isn’t. Also, notice the strange disk image name “SmartInstaller”… The disk image file is named FlvPlayer1.dmg, but is mounted as SmartInstaller. My guess on this is that “SmartInstaller”, and probably a lot of the later code, is written by some individual who then sells his product to would-be ransomers, who can customize the product to their needs (point it to their particular ransom website, make it look like something useful in particular—in this case a video player).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.26.47-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.26.47-AM-300x164.png&quot; alt=&quot;Screen Shot 2015-01-21 at 10.26.47 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first thing it does is ask for an admin password, which is the &lt;em&gt;last&lt;/em&gt; thing that a legit installer does.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.27.03-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.27.03-AM-300x216.png&quot; alt=&quot;Screen Shot 2015-01-21 at 10.27.03 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we can see that the installer program clearly does not look like an installer package. Why, malware author, not use the package format to make your installer look more legit? I’m not sure. I don’t see anything in the installed payload that wouldn’t work through a standard package. Again, this points to a customizable product; specifically, it’s probably set up so that someone with no knowledge of OS-specific deployment technologies can get up and running quickly. I’m sure there’s a Windows version of “SmartInstaller”/ProjectX as well.&lt;/p&gt;

&lt;p&gt;Anyway, tellingly, the “I agree” checkbox for the “License Agreement” and “Privacy Policy” doesn’t actually allow you to deselect it. If you continue, you are agreeing. If you follow the links in the app I came across, they lead to website with an unfamilar name, “deal-top.com”. We’ve gone from FlvPlayer1 to SmartInstaller to deal-top. Here are the links: &lt;a href=&quot;http://www.deal-top.com/deal-top/terms-of-use&quot;&gt;Terms of Use&lt;/a&gt; and &lt;a href=&quot;http://www.deal-top.com/deal-top/privacy-policy&quot;&gt;Privacy Policy&lt;/a&gt;, which seem like pretty boilerplate legalese letting those interested enough in reading them that Deal Top can basically do anything they want.&lt;/p&gt;

&lt;p&gt;Deal Top is described as a browser plugin that offers you alternate shopping opportunities (from a FLVPlayer?) and mentions specifically that you’re welcome to uninstall it from the Internet Explorer, Chrome, or Firefox browser (my user uses Safari…). If you browse onto the other pages on the website, it’s pretty sparse. &lt;/p&gt;

&lt;p&gt;There’s a download link which results in a disk image named “MPlayerX.dmg”, not “FlvPlayer1.dmg”. Once mounted, they look strangely similar, although not identical:
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-2.20.51-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-2.20.51-PM-300x124.png&quot; alt=&quot;Screen Shot 2015-01-21 at 2.20.51 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I took a look at the binary contained within, and sure enough, they’re identical. So “Deal Top”’s purported browser plugin is actually named “MPlayerX.dmg”? That sounds more like a… media player? Right? And it is identical to the “FlvPlayer1” which brought us here in the first place.&lt;/p&gt;

&lt;p&gt;There is an amusing link at the bottom, &lt;a href=&quot;http://www.smart-installer.com/smart-installer/remove&quot;&gt;“Uninstall”&lt;/a&gt;, which leads to a new site: &lt;a href=&quot;http://www.smart-installer.com&quot;&gt;www.smart-installer.com&lt;/a&gt;. The “uninstall” information is, actually, basically what I’m going to tell you to do!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.18.45-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.18.45-PM-300x77.png&quot; alt=&quot;Screen Shot 2015-01-21 at 12.18.45 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This “smart-installer.com” site must be the destination for a lot of “Uninstall” links, since you’ll notice that the identifier for the LaunchAgents and LaunchDaemons only read “PackageToRemove”… Probably because there are hundred if not thousands of “Deal Top”-like sites and installers pointing to it. &lt;/p&gt;

&lt;p&gt;Since the Terms of Use mention Internet Explorer, I assumed that there would be a separate set of instructions for uninstalling on Windows. There aren’t. Just to be sure, I used curl to download the uninstall page with a different user agent, but got the same thing. I did see that smart-installer.com is being served by nginx, so the mysterious author must be somewhat current.&lt;/p&gt;

&lt;p&gt;By the way, &lt;a href=&quot;http://www.smart-installer.com&quot;&gt;www.smart-installer.com&lt;/a&gt; src is just an html tag with an empty head and an empty body. Curious.&lt;/p&gt;

&lt;p&gt;I did a whois lookup on the websites mentioned above, without much useful information. Most of them are registered by www.enom.com, which is in term registered by GoDaddy. eNom is apparently based in Kirkland, WA, and you can read about them from the Better Business Bureau &lt;a href=&quot;http://www.bbb.org/western-washington/business-reviews/internet-web-hosting/enom-incorporated-in-kirkland-wa-64002064&quot;&gt;here&lt;/a&gt;. According to their Twitter profile, they are a wholesaler of domain names. “deal-top.com” is registered by namecheap.com, and is protected by their “whoisguard” product, which makes getting any information about who actually owns these websites difficult to ascertain.&lt;/p&gt;

&lt;p&gt;Looking at the actual compiled code for the installer, I found a certificate chain that includes this mysterious entry:
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.38.24-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.38.24-PM.png&quot; alt=&quot;Screen Shot 2015-01-21 at 12.38.24 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Who is this mysterious “Moshe Cohen”? Googling different things with “Moshe Cohen flv player” (should I use only-search.com to look him up?) gives a top hit of this blog post about how to use Chrome to download videos from Facebook. But the article itself is not related to Moshe, rather, this comment:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.39.56-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.39.56-PM.png&quot; alt=&quot;Screen Shot 2015-01-21 at 12.39.56 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’m not confident that it’s the same Moshe Cohen. Who knows. &lt;/p&gt;

&lt;p&gt;Running the installer app through pkgutil’s –check-signature seems to check out:
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-3.29.25-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-3.29.25-PM-300x92.png&quot; alt=&quot;Screen Shot 2015-01-21 at 3.29.25 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’d be interested to see if there’s some way to see get information on a valid, registered Apple Developer.&lt;/p&gt;

&lt;p&gt;Digging around in the installer some more, you can find this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.46.01-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-12.46.01-PM-300x25.png&quot; alt=&quot;Screen Shot 2015-01-21 at 12.46.01 PM&quot; /&gt;&lt;/a&gt; &lt;/p&gt;

&lt;p&gt;Specifically, references to SIMBL, which is short for “Simple Bundle Loader”. Check out the &lt;a href=&quot;http://en.wikipedia.org/wiki/SIMBL&quot;&gt;Wikipedia page.&lt;/a&gt; It allows you to load code into an application to manipulate it in ways that the original developer did not provide. A nice way of referring to them would be “unofficial plugins”, and a not so nice way would be “hacks”. I’m not sure that SIMBL stuff even works any more… Still, there’s a lot of references to &lt;a href=&quot;https://polarssl.org&quot;&gt;PolarSSL&lt;/a&gt;, which is ominous.&lt;/p&gt;

&lt;p&gt;Further digging, and lo! More mystery!&lt;/p&gt;

&lt;p&gt;Buried deep in the agent, is a twisted koan of some kind: /Library/Application Support/projectX/Agent/agent.app/Contents/Resources/en.lproj/Credits.rtf reads (in its entirety):&lt;/p&gt;

&lt;blockquote&gt;**Engineering:**
	Some people
**Human Interface Design:**
	Some other people
**Testing:**
	Hopefully not nobody
**Documentation:**
	Whoever
**With special thanks to:**
	Mom&lt;/blockquote&gt;

&lt;p&gt;Now, this is something! It goes from sarcasm to worry to nihilism to familial gratitude in a rollercoaster haiku of a few mere lines. Somewhere out there, a deeply questioning V wants his mother to know, despite their estrangement, that he still thinks fondly of her.&lt;/p&gt;

&lt;p&gt;Who is testing? Hopefully not nobody! Who has documented this undertaking? Whoever? Perhaps nobody. Perhaps someone. It is unimportant. Documentation is in the past, a dead thing. V is only interested in moving forward, (Engineering: some &lt;em&gt;people&lt;/em&gt;, living, breathing, thinking beings with lives and families)&lt;/p&gt;

&lt;p&gt;Anyway, back to the installer.&lt;/p&gt;

&lt;p&gt;Amusingly, it gives you the sham option of a “Quick (Recommended)” install, and an “Advanced” install. (Sorry, forgot to make a screenshot).&lt;/p&gt;

&lt;p&gt;Here are the files installed by our installer:
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.47.51-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.47.51-AM.png&quot; alt=&quot;Screen Shot 2015-01-21 at 10.47.51 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Just for down-and-dirty research, I used JAMF’s Composer to track filesystem changes and generate the list above. I’ve removed the cruft from the application saved-state caching system, etc, and just left the files installed by “Smart Installer”.&lt;/p&gt;

&lt;p&gt;So, we’re looking at a system framework, and an executable hidden in Application Support, that is run and updated through a few LaunchAgents and LaunchDaemons.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-11.08.48-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-11.08.48-AM-300x146.png&quot; alt=&quot;Screen Shot 2015-01-21 at 11.08.48 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-11.08.59-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-11.08.59-AM-300x168.png&quot; alt=&quot;Screen Shot 2015-01-21 at 11.08.59 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-11.09.18-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-11.09.18-AM-300x163.png&quot; alt=&quot;Screen Shot 2015-01-21 at 11.09.18 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;All of these LaunchD jobs load the “Agent” included in the Application Support folder, with different commandline arguments. I did some quick tcpdumps of “agent”, running with each of the commandline arguments, and didn’t find anything.&lt;/p&gt;

&lt;p&gt;Notice, also, that the name has changed again. No longer “Smart Installer”, “FLVPlayer1”, or “Deal Top”. Now we’re looking at the sinisterly-named “projectx” (as per the reversed identifier). Perhaps as some kind of obfuscation, the identifier specified in each plist is different. For example, com.projectx.agent.plist shows up in LaunchD as “com.v.agent”. Being a fan of Pynchon, this new moniker, simply “V”, appeals to me.&lt;/p&gt;

&lt;p&gt;The installer finishes pretty quickly, and, TADA! Nothing happens. In fact, NOTHING happens. I’m surprised that it doesn’t postinstall script start those LaunchDaemons. No, you have to reboot to get them active. Once you do, however, your home page is changed:
&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.59.19-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.59.19-AM-300x164.png&quot; alt=&quot;Screen Shot 2015-01-21 at 10.59.19 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can change it back to whatever you like, but upon restarting Safari, it is restored to “www-only-search.com”. This is what the “agent” is doing in the background-making sure that certain preferences are set how “they” (be they Moshe Cohen, Deal Top, “V”, etc) want it.&lt;/p&gt;

&lt;p&gt;Another change is that it sets the cookie policy to allow all cookies. This is a key in com.apple.Safari.plist. The installer sets it in the root preference domain, at /var/root/Library/Preferences/com.apple.Safari.plist. The “agent” enforces the setting, however, only in the user domain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.58.09-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-21-at-10.58.09-AM-300x109.png&quot; alt=&quot;Screen Shot 2015-01-21 at 10.58.09 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I dumped all cookies from my test machine and quit Safari, and then restarted Safari. Very quickly, I could see a bunch of cookies being added to the cookie store. There must be some traffic going on in the background. After two restarts I had 36 cookies.&lt;/p&gt;

&lt;p&gt;If you toggle the cookie setting to block “Always”, upon the next restart, the user preference is restored to “Never”. This happens regardless of whether you change or delete the preference with defaults delete/write, or toggle it in the preferences dialog. (The keys are WebKitStorageBlockingPolicy and “com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy”. 0 is “Never”, and 2 is “Always”)&lt;/p&gt;

&lt;p&gt;It took me a little while to figure out what else was happening. While it’s annoying to have all of your omnibar searches pumped through Yahoo, that’s not that bad. Eventually I decided to trust in the Terms of Use and try to engage in some e-commerce. Well, well!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-22-at-11.37.23-AM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2015/01/Screen-Shot-2015-01-22-at-11.37.23-AM-300x170.png&quot; alt=&quot;Screen Shot 2015-01-22 at 11.37.23 AM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;That’s not the Amazon we all know. There is actually an overlay, just like Deal Top promised. Perhaps “V” is actually an upstanding entrepreneur. I made a packet capture with tcpdump while surfing around Amazon on an infected computer and, despite my relatively weak Wireshark skills, quickly identified some interesting traffic. A lot of extra traffic was going to some IP’s which included “www.superfish.com” in their requests. Superfish seems to be a legitimate visual search product, but if you search for “superfish malware” there does indeed seem to be a shopping “virus” named superfish. I plugged the IP address into whois and interestingly enough, a new name appeared. A “Grahame Cohen” is listed for a range of several IPs. Is this a relative of Moshe’s? A brother? I think it’s just another one of V’s shifting personalities, an alter-ego amongst many.&lt;/p&gt;

&lt;p&gt;Not to mention, there’s also a little handle on the overlays labeled “Offers4U”, just to add to the list of monikers, shell businesses, and mystery. In reality, all of this trouble seems to be an attempt to send as much web traffic through bizrate.com as possible to generate ad pay-per-click revenues. This is click fraud-check it out. It’s a huge industry. Unfortunately, I don’t know how to trace the pay-per-clicks to figure out who gets the money; who benefits from V’s deception?&lt;/p&gt;

&lt;p&gt;After all of that, how do we clean this stuff up? It’s actually quite simple. The quick and dirty approach is to just delete the files installed and reboot. Just to be nerdy, I like to unload them first just to be safe. So here’s how it’s done.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ #### Sudo in and unload/disable LaunchD jobs.
$ sudo su -
$ launchctl unload -w /Library/LaunchDaemons/com.projectx.*
launchctl: Error unloading: com.v.daemon

$ #### Interesting that the &quot;daemon&quot; wasn&#39;t actually loaded...
$ launchctl unload -w /Library/LaunchAgents/com.projectx.agent.plist
$ launchctl list | grep com\.v\..

$ ### (Nothing to report)
$ ### Remove files...
$ rm -rf /Library/Application\ Support/projectX /Library/Launch*/com.projectx.*.plist /System/Library/Frameworks/v.framework
$ ### Fix cookie preferences
$ defaults delete com.apple.Safari WebKitStorageBlockingPolicy
$ defaults delete com.apple.Safari &quot;com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy&quot;
$ ### (Alternately, defaults write to set them to 1 or 2)
$ exit
$ #### Back to &quot;me&quot;.
$ defaults delete com.apple.Safari WebKitStorageBlockingPolicy
$ defaults delete com.apple.Safari &quot;com.apple.Safari.ContentPageGroupIdentifier.WebKit2StorageBlockingPolicy&quot;
$ defaults write com.apple.Safari HomePage &quot;http://slashdot.org&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(This is a simulated bash session. Feel free to make a script to do this, although the names will probably all be different the next time you come across it)&lt;/p&gt;

&lt;p&gt;A reboot probably wouldn’t hurt. After all of this, things should be back to normal.&lt;/p&gt;

&lt;p&gt;This procedure is probably pretty similar across a variety of these “products”; just look for LaunchAgents/LaunchDaemons in the system domain and see what files they reference. At some point I plan on writing a little script to automate some of the research that goes on for this so that you can quickly and easily remove these things.&lt;/p&gt;

&lt;p&gt;I look forward to my next adware removal. I want to see if V is involved. Has he or she advanced in skill? Are there any more clues as to his mental state? How is his mother?&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/cleaning-up-stupid-mac-malware-projectx/&quot;&gt;Cleaning up stupid Mac malware: &quot;ProjectX&quot;&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on January 21, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Solving Problems With python-jss: Finding the Printers in the Policies]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/python-jss/solving-problems-with-python-jss-finding-the-printers-in-the-policies/" />
  <id>http://localhost:4000/python-jss/solving-problems-with-python-jss-finding-the-printers-in-the-policies</id>
  <published>2015-01-06T15:47:33-05:00</published>
  <updated>2015-01-06T15:47:33-05:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;I wanted to start showing some short examples of easy and quick python scripts
that I have used in my day-to-day admin job. Today I got around to working on a
broken printer installation. One of our printers had a driver that was not
working, and needed to be switched out.&lt;/p&gt;

&lt;p&gt;Adding the package to the JSS and creating an update policy was no big deal,
but I wanted to know &lt;em&gt;exactly&lt;/em&gt; which policies distributed that printer. If you
need to change a printer’s PPD file, you have to remove and then re-add a
printer; and when you remove a printer from Casper Admin, that printer gets
silently dropped from all policies as well. We have a large number of policies,
and I don’t like to make mistakes, so I wanted to get this right the first
time.&lt;/p&gt;

&lt;p&gt;python-jss to the rescue!&lt;/p&gt;

&lt;p&gt;I of course already have my python-jss preferences set up (see the
&lt;a href=&quot;https://github.com/sheagcraig/python-jss/wiki/Configuration&quot;&gt;Wiki!&lt;/a&gt;), so we
can start with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jss&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jss_prefs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSSPrefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jss_prefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and we have a functioning JSS object.&lt;/p&gt;

&lt;p&gt;Next, we are interested in looking at Policies, so let’s grab them:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_policies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrieve_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice that I skip the intermediary step of assigning the results of
&lt;code&gt;j.Policy()&lt;/code&gt; to a variable. This would just give us a list of policy ID’s and
names, which isn’t enough information. We want the entire XML for the policies.&lt;/p&gt;

&lt;p&gt;Speaking of which, we need to know a little bit about the structure of a policy
to be able to find the data that we’re interested in (we can’t just “Find”)
through the whole text, since this is XML, and structure is important! So,
doing a little research, I pulled up one of my printer-installer policies and
looked at the relevant data. Here’s how to do it, and what it looks like (I
trimmed out all of the unimportant stuff):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;287&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;287&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Classroom&lt;/span&gt;  &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Faculty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Printers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;general&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leave_existing_default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;leave_existing_default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;263&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSColor1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;264&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PSWorkroom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;make_default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So we can see that a policy has a “printers” section, with a list of
“printer”s. Each “printer” has its user-facing name in a subelement named
“name”. Also, the policy has an ID and a name which I’m interested in because I
want to make sure I know how to identify them later. Fortunately, pretty much
all JSSObject subclasses have a convenience accessor for .id and .name.&lt;/p&gt;

&lt;p&gt;Now, we just loop through all of the policies looking for a printer with the
name we’re looking for; in this case “LSCopier”. This is slightly challenging
because it involves using the interface to &lt;code&gt;ElementTree.Element&lt;/code&gt;. Let’s look at
the fully expanded version first:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_policies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;printers/printer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;LSCopier&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Printer found in ID &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;
                      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running this short (10 lines) gets me my results. Indeed, I could probably
parameterize this and re-use it later… Which I’ll do next. Also, let’s trim
it up into a list comprehension.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_policies&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;printers/printer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(There’s no way this will fit on a single line in this theme… Sorry!) This
nets us a “results” array filled with tuples of policy names and ids that match
our argument “search_name”. To pull this off we need to import sys, and make a
few more changes.&lt;/p&gt;

&lt;p&gt;Here is the entire finished script:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/python&lt;/span&gt;
    
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
    
    &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;jss&lt;/span&gt;
    
    
    &lt;span class=&quot;n&quot;&gt;jssPrefs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSSPrefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jss&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jssPrefs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;all_policies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Policy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retrieve_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_name&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Searching for &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_name&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;all_policies&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;policy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;printers/printer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findtext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;search_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Found in &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This would be easy to expand into a more general XML search utility for
auditing your Policies. For example, you may want to search for policies that
install a particular package (although
&lt;a href=&quot;https://github.com/sheagcraig/jss_helper&quot;&gt;jss_helper&lt;/a&gt; already does that). Or
you might want to search for policies that Recon.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/python-jss/solving-problems-with-python-jss-finding-the-printers-in-the-policies/&quot;&gt;Solving Problems With python-jss: Finding the Printers in the Policies&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on January 06, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Getting started with JSSImporter for AutoPkg: Pt 1]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/autopkg/jssimporter/getting-started-with-jssimporter-for-autopkg-pt-1/" />
  <id>http://localhost:4000/autopkg/jssimporter/getting-started-with-jssimporter-for-autopkg-pt-1</id>
  <published>2014-12-10T14:28:49-05:00</published>
  <updated>2014-12-10T14:28:49-05:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Many Mac admins have been relying more and more on AutoPkg to help automate the task of keeping software up to date. I know personally that it was an excellent addition to our school’s software update workflow, which was based around Munki for deployment, and InstaDMG for building install images.&lt;/p&gt;

&lt;p&gt;But times change, and our school switched to using the Casper Suite to manage our fleet, and dropped Munki. Suddenly I had to start manually moving packages around and clicky-clicky-creating a ton of policies. This made me sad.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/tears.jpg&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/tears-300x220.jpg&quot; alt=&quot;tears&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Google Image search “sad” some time. You won’t be disappointed.&lt;/p&gt;

&lt;p&gt;Fortunately, a brilliant guy named Allister worked through the mountain of details required to make it a possibility to upload AutoPkg’ed products to a JSS through it’s API, as well as create policies. This was enough to get me off my butt and start working on modifying his jss-autopkg-addon to meet our organization’s needs. This led in a multitude of directions; I created a python wrapper around the entire set of API features (as well as some non-API features) and refactored and rewrote Allister’s original work into something that was much more flexible, albeit &lt;em&gt;way&lt;/em&gt; more complicated to set up.&lt;/p&gt;

&lt;p&gt;So that’s where this series of blog posts fits in. I’m going to detail the process of setting up the JSSImporter and crafting recipes that meet some different workflow demands. Obviously, you’ll need a working installation of AutoPkg first, and it wouldn’t hurt to have a test JSS set up to practice with prior to rolling things out for production purposes. Really, the primary role of AutoPkg and JSSImporter for us is to provide a means for keeping our testers stocked with the latest software, so some instability is always expected anyway. While it’s certainly possible to pump packages straight into your production pipeline, in general, this is just to populate the testing environment with the latest and greatest, and thus is probably not mission-critical. So experimentation is good!&lt;/p&gt;

&lt;p&gt;Our first order of business, then, is to grab the &lt;a href=&quot;https://github.com/sheagcraig/JSSImporter/releases&quot;&gt;latest JSSImporter installer package&lt;/a&gt; and install it. You don’t need to fool around with git or anything; just grab the package. &lt;em&gt;Don’t&lt;/em&gt; Google Image search “grab the package”.&lt;/p&gt;

&lt;p&gt;In this, first installment, we’re just going to configure JSSImporter and use the recipes I’ve put into my jss-recipes repo. We will talk about how to write our own recipes, handle problem packages, and plan and customize our deployment workflow, in future posts.&lt;/p&gt;

&lt;p&gt;The first thing we need to do is provide some information to JSSImporter about the JSS and how to access it, and what resources it has available. If you’ve configured AutoPkg, you should be familiar with how to do this. We are going to add the following keys to our com.github.autopkg.plist file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;JSS_URL&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;API_USERNAME&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;API_PASSWORD&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, you should create an account on your JSS that will be used for API access, probably even just for AutoPkg. It will need “Create”, “Read”, and “Update” privileges on&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Categories&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Computer Groups&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Distribution Points&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Extension Attributes&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Packages&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Policies&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Scripts&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To add the keys to your AutoPkg prefs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defaults write com.github.autopkg JSS_URL https://test.jss.org:8443
defaults write com.github.autopkg API_USERNAME apiUser
defaults write com.github.autopkg API_PASSWORD apiPassword
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Substitute your information for the final values above. The URL needs to be complete–include the protocol and the port!&lt;/p&gt;

&lt;p&gt;The next part is the tricky one: adding in your distribution points. And it’s tricky only in the sense that you either need to hand-edit some XML or you need to use the esoteric “plistbuddy”. Since we’re going to be writing recipes later, it makes sense to not avoid typing any XML and just edit the darn thing. There’s one caveat here though-don’t forget that on contemporary OS X systems, if you edit a preference file (i.e. .plist) the settings don’t take effect until the preferences system syncs. This can lead to some mystifying issues, so get in the habit of doing a &lt;code&gt;defaults read com.github.autopkg&lt;/code&gt; each time you edit the preferences.&lt;/p&gt;

&lt;p&gt;Fire up vim or I suppose some other text editor and add a section to ~/Library/Preferences/com.github.autopkg.plist that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	&amp;lt;key&amp;gt;JSS_REPOS&amp;lt;/key&amp;gt;
	&amp;lt;array&amp;gt;
	&amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, for each distribution point you would like to have AutoPkg and JSSImporter upload to, you need to add a dict of values. Each Casper setup is different, so take a look at &lt;a href=&quot;https://github.com/sheagcraig/JSSImporter/blob/master/README.md#adding-distribution-points&quot;&gt;the README&lt;/a&gt; for detailed information on each type. For demonstration purposes, I’ll just configure a single AFP distribution point.&lt;/p&gt;

&lt;p&gt;The documentation lets me know that using the auto-discovery for AFP/SMB shares, I only need a name and password (for the Read/Write enabled user on the share) for an AFP share. My preferences file should now have this section:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;key&amp;gt;JSS_REPOS&amp;lt;/key&amp;gt;
    &amp;lt;array&amp;gt;
        &amp;lt;dict&amp;gt;
            &amp;lt;key&amp;gt;name&amp;lt;/key&amp;gt;
            &amp;lt;string&amp;gt;USRepository&amp;lt;/string&amp;gt;
            &amp;lt;key&amp;gt;password&amp;lt;/key&amp;gt;
            &amp;lt;string&amp;gt;abc123&amp;lt;/string&amp;gt;
        &amp;lt;/dict&amp;gt;
    &amp;lt;/array&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that’s all I need to get started. Again, check the README for details on setting up your JDS, or issues regarding multiple DP’s, etc.&lt;/p&gt;

&lt;p&gt;Next, we’ll use autopkg’s command line to add in my jss-recipes:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autopkg repo-add https://github.com/sheagcraig/jss-recipes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now run any of these recipes with autopkg run. e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;autopkg run Evernote.jss
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But what does it do?&lt;/p&gt;

&lt;p&gt;My recipes are based around the idea of making packages for testing available to a subset of computers on campus. At a somewhat abstract level, what happens is that the JSSImporter processor will take the package spit out by the standard Evernote.pkg recipe and then try to set up all of the pieces of the puzzle needed to distribute it to testing computers.&lt;/p&gt;

&lt;p&gt;First it ensures that the categories exist for the package and for the policy, creating them if they’re missing, and just leaving them alone otherwise. The Evernote recipe will ensure “Productivity” for the package, and “Testing” for the policy.&lt;/p&gt;

&lt;p&gt;Next, the JSSImporter ensures an object representing our package exists on the API. Again, I say “ensure” rather than “creates”, as it will try to reuse an existing package object rather than make a new one so that you don’t get your JSS all crudded up with duplicates.&lt;/p&gt;

&lt;p&gt;Once there is a package object, the JSSImporter will upload the package to every configured distribution point or distribution server. This process can take quite long, especially for some of the giant Apple packages like Logic or GarageBand. In our case, the package will be uploaded as “Evernote-6.0.3.pkg”, with a category of “Productivity”.&lt;/p&gt;

&lt;p&gt;The next step is the JSSImporter will ensure that any needed extension attributes are present. (None are needed for Evernote).&lt;/p&gt;

&lt;p&gt;So far, so good. Next, groups are handled. Again, JSSImporter ensures that they exist. My recipes all create a smart group for each product. For most of them, the smart group criteria is looking to find computers which are members of the static group “Testing” (which is how I specify which computers are “Testing” computers), and have the “Application Title” in question, with an “Application Version” which does not match the one for our package. Note that this is not the same thing as “older than” or “with a lesser version number”, as there’s no way to do that without extension attributes (maybe I’ll cover how to handle that later!). So in our example, the Evernote recipe will ensure an up-to-date smart group named “Evernote-update-smart” is present, with criteria of “Application Title” of “Evernote.app”, “Application Version” “is not” “6.0.3”, and is a “member of” the computer group “Testing”.&lt;/p&gt;

&lt;p&gt;Said another way, our policy will be available to all computers which I have manually placed into the “Testing” group, with any Evernote version that does not match the one I am uploading.&lt;/p&gt;

&lt;p&gt;Next, the JSSImporter ensures that any scripts needed for installation are available on the JSS. None are needed for Evernote, but some products need a pre-install or post-install script to make sure everything works correctly.&lt;/p&gt;

&lt;p&gt;The policy is handled next. The important details for the policies are that they are scoped to the “Evernote-update-smart” group as expected. They are “enabled” immediately. They have a “category” of “Testing” so they are all grouped together in Self Service and in the JSS-&amp;gt;Policies page. They are triggered through Self-Service only (meaning not at Check-In, Logout, etc). And finally, they are set to the “frequency” of “ongoing”. However, they have a final “maintenance” step of running a recon, so if everything installed correctly, the recon will pop them out of the smart group, and the user can’t install a second time. (The “ongoing” frequency allows us to update this policy when the &lt;em&gt;next&lt;/em&gt; Evernote update comes out, and the user can again install without us having to go and “Flush” the policy logs like we would with a “Once per Computer” frequency. The goal is to be as hands-off as possible).&lt;/p&gt;

&lt;p&gt;Finally, the JSSImporter makes sure that an icon file is available for the Self Service policy to display.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/Screen-Shot-2014-12-10-at-2.07.15-PM.png&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/Screen-Shot-2014-12-10-at-2.07.15-PM.png&quot; alt=&quot;Screen Shot 2014-12-10 at 2.07.15 PM&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A user with a computer in the “Testing” group can thus open up Self-Service, authenticate, and pop the “install” button on the Testing-&amp;gt;”Install Latest Evernote” button. The slick thing is that the Install Evernote option will only appear to a computer that doesn’t already have that version. Once Self-Service downloads and installs the policy, a recon is run which will discover the newer version of Evernote, and the computer will fall out of the “Evernote-update-smart” group until the next update comes out.&lt;/p&gt;

&lt;p&gt;Since there can be a lag between when we post updates, and the latest recon on a computer, I provide a self-service policy to my testers that will trigger a recon, after which all currently available updates should be available.&lt;/p&gt;

&lt;p&gt;That concludes the first installment. Next, we’ll look at adapting an already working package recipe to the workflow outlined above and creating a JSS recipe.&lt;/p&gt;

&lt;p&gt;If you’re really really into Python, here’s a fresh python-print blazer from Roberto Cavelli:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/pythonBlazer.jpg&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/pythonBlazer.jpg&quot; alt=&quot;pythonBlazer&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/autopkg/jssimporter/getting-started-with-jssimporter-for-autopkg-pt-1/&quot;&gt;Getting started with JSSImporter for AutoPkg: Pt 1&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on December 10, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Zipping Non-Flat Packages For Casper]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/jssimporter/python-jss/zipping-non-flat-packages-for-casper/" />
  <id>http://localhost:4000/jssimporter/python-jss/zipping-non-flat-packages-for-casper</id>
  <published>2014-12-09T09:33:39-05:00</published>
  <updated>2014-12-09T09:33:39-05:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;Just a short little technical note. python-jss just added support for the Jamf distribution server as a distribution point type, which hopefully will make both python-jss and JSSImporter (I’m going to start calling it that instead of jss-autopkg-addon) useful for more people. And just to let people know the direction for the future, I’m hoping to add CDP support very soon.&lt;/p&gt;

&lt;p&gt;Anyway, AutoPkg makes flat packages, which makes sense since non-flat packages have been deprecated for quite awhile now. Non-flat packages still work, and indeed, in our shop we don’t bother to do anything special to handle them. However, you can’t PUT or POST a directory of files—you have to archive multiple files into a single file or have some kind of mechanism for multiple uploads. Casper Admin’s solution to this is to zip the package prior to uploading (if you have an incompatible DP configured). You can see that the pkg gains a .zip extension. On the policy side, the jamf binary knows what to do: it unzips the package prior to installing.&lt;/p&gt;

&lt;p&gt;But some vendors are still shipping non-flat packages (Silverlight is the example I’ve been testing with).&lt;/p&gt;

&lt;p&gt;Github user MitchelSBlake pointed out to me that this is often needed not only for JDS distribution points, but also for SMB shares to work around packages that may have broken symbolic links.&lt;/p&gt;

&lt;p&gt;After trying a number of different approaches, I’ve decided to take a couple of steps to continue to work with non-flat packages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;.ZIP/.zip as an extension is now considered a package&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The JSSImporter will test for whether a package is non-flat, and automatically zip it up into the same directory that the package came from (probably as reported by pkg_path&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A couple of further implications: ALL non-flat packages will get zipped. You don’t have to have a JDS for this to occur. So there will probably be some more processor overhead, especially as larger packages are compressed. If this starts to be a memory issue or causes people issues, I can drop back to not actually compressing the packages. It also means that JSSImporter is going to want to re-upload any packages that you may already have on your distribution points, as it now is in a zip.&lt;/p&gt;

&lt;p&gt;Also, python-jss will just fail if you try to copy a package to a JDS; however, it will issue a warning that tells you why it won’t work. It’s up to you figure out how you want to handle this. Please take note, that if you created a Package object before uploading, only to discover that your package was not flat, you’ll probably want/need to change the name to match the new .zip extension.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/jssimporter/python-jss/zipping-non-flat-packages-for-casper/&quot;&gt;Zipping Non-Flat Packages For Casper&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on December 09, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Technology!]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/foolishness/technology/" />
  <id>http://localhost:4000/foolishness/technology</id>
  <published>2014-12-08T13:54:58-05:00</published>
  <updated>2014-12-08T13:54:58-05:00</updated>
  <author>
    <name></name>
    <uri>http://localhost:4000</uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/withAllister1.jpg&quot;&gt;&lt;img src=&quot;http://labs.da.org/wordpress/sheagcraig/files/2014/12/withAllister1.jpg&quot; alt=&quot;withAllister&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/foolishness/technology/&quot;&gt;Technology!&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on December 08, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Hello World]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/blog/hello-world/" />
  <id>http://localhost:4000/blog/hello-world</id>
  <published>2014-08-08T15:39:55-04:00</published>
  <updated>2014-08-08T15:39:55-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory - edit this post and re-build (or run with the &lt;code&gt;-w&lt;/code&gt; switch) to see your changes!
To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention: YYYY-MM-DD-name-of-post.ext.&lt;/p&gt;

&lt;h2 id=&quot;sample-heading&quot;&gt;Sample Heading&lt;/h2&gt;

&lt;h3 id=&quot;sample-heading-2&quot;&gt;Sample Heading 2&lt;/h3&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/blog/hello-world/&quot;&gt;Hello World&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on August 08, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Override Author Byline Test Post]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/author-override/" />
  <id>http://localhost:4000/articles/author-override</id>
  <published>2014-06-19T00:00:00-04:00</published>
  <updated>2014-06-19T00:00:00-04:00</updated>
  <author>
    <name>Billy Rick</name>
    <uri>http://localhost:4000</uri>
    <email>billy@rick.com</email>
  </author>
  <content type="html">
    &lt;p&gt;For those of you who may have content written by multiple authors on your site you can now assign different authors to each post if desired.&lt;/p&gt;

&lt;p&gt;Previously the theme used a global author for the entire site and those attributes would be used in all bylines, social networking links, Twitter Card attribution, and Google Authorship. These &lt;code&gt;owner&lt;/code&gt; variables were defined in &lt;code&gt;config.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Start by modifying or creating a new &lt;code&gt;authors.yml&lt;/code&gt; file in the &lt;code&gt;_data&lt;/code&gt; folder and add your authors using the following format.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Authors&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;billy_rick&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Billy Rick&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;web&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://thewhip.com&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;billy@rick.com&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;What&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;want,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;jewels?&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;am&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;very&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;extravagant&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;man.&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bio-photo-2.jpg&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;extravagantman&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;BillyRick&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;cornelius_fiddlebone&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Cornelius Fiddlebone&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;cornelius@thewhip.com&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bio&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;I&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ordered&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;what?&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;avatar&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;bio-photo.jpg&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;twitter&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;rhymeswithsackit&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;google&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;plus&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;CorneliusFiddlebone&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To assign Billy Rick as an author for our post. You’d add the following YAML front matter to a post:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;billy_rick&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/author-override/&quot;&gt;Override Author Byline Test Post&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on June 19, 2014.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Syntax Highlighting Post]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/code-highlighting-post/" />
  <id>http://localhost:4000/articles/code-highlighting-post</id>
  <published>2013-08-16T00:00:00-04:00</published>
  <updated>2013-08-16T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Syntax highlighting is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;pygments-or-rouge-code-blocks&quot;&gt;Pygments or Rouge Code Blocks&lt;/h3&gt;

&lt;p&gt;To modify styling and highlight colors edit &lt;code&gt;/_sass/_syntax.scss&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nf&quot;&gt;#container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;-240px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;pagination&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;role=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;navigation&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    {% if page.previous %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ page.previous.url }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.previous.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Previous article&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    {% endif %}
    {% if page.next %}
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ site.url }}{{ page.next.url }}&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;btn&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{{ page.next.title }}&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Next article&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    {% endif %}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- /.pagination --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TagIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Page&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_yaml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_layouts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tag_index.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tag&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tag_title_prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tag_title_prefix&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Tagged: &amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;tag_title_suffix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;tag_title_suffix&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;amp;#8211;&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag_title_prefix&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;description&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;An archive of posts tagged &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;standard-code-block&quot;&gt;Standard Code Block&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&amp;gt;
    {% if page.previous %}
        &amp;lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&amp;gt;Previous article&amp;lt;/a&amp;gt;
    {% endif %}
    {% if page.next %}
        &amp;lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&amp;gt;Next article&amp;lt;/a&amp;gt;
    {% endif %}
&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;fenced-code-blocks&quot;&gt;Fenced Code Blocks&lt;/h3&gt;

&lt;p&gt;To modify styling and highlight colors edit &lt;code&gt;/_sass/_coderay.scss&lt;/code&gt;. Line numbers and a few other things can be modified in &lt;code&gt;_config.yml&lt;/code&gt;. Consult &lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;Jekyll’s documentation&lt;/a&gt; for more information.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-css&quot;&gt;#container {
    float: left;
    margin: 0 -240px 0 0;
    width: 100%;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;nav class=&quot;pagination&quot; role=&quot;navigation&quot;&amp;gt;
    {% if page.previous %}
        &amp;lt;a href=&quot;{{ site.url }}{{ page.previous.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.previous.title }}&quot;&amp;gt;Previous article&amp;lt;/a&amp;gt;
    {% endif %}
    {% if page.next %}
        &amp;lt;a href=&quot;{{ site.url }}{{ page.next.url }}&quot; class=&quot;btn&quot; title=&quot;{{ page.next.title }}&quot;&amp;gt;Next article&amp;lt;/a&amp;gt;
    {% endif %}
&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Jekyll
  class TagIndex &amp;lt; Page
    def initialize(site, base, dir, tag)
      @site = site
      @base = base
      @dir = dir
      @name = &#39;index.html&#39;
      self.process(@name)
      self.read_yaml(File.join(base, &#39;_layouts&#39;), &#39;tag_index.html&#39;)
      self.data[&#39;tag&#39;] = tag
      tag_title_prefix = site.config[&#39;tag_title_prefix&#39;] || &#39;Tagged: &#39;
      tag_title_suffix = site.config[&#39;tag_title_suffix&#39;] || &#39;&amp;amp;#8211;&#39;
      self.data[&#39;title&#39;] = &quot;#{tag_title_prefix}#{tag}&quot;
      self.data[&#39;description&#39;] = &quot;An archive of posts tagged #{tag}.&quot;
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Syntax_highlighting&quot;&gt;http://en.wikipedia.org/wiki/Syntax_highlighting&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/code-highlighting-post/&quot;&gt;Syntax Highlighting Post&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on August 16, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Sample Link Post]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/sample-link-post/" />
  <id>http://localhost:4000/articles/sample-link-post</id>
  <published>2013-08-12T00:00:00-04:00</published>
  <updated>2013-08-12T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;So Simple Theme now supports &lt;strong&gt;link posts&lt;/strong&gt;, made famous by John Gruber. To activate just add &lt;code&gt;link: http://url-you-want-linked&lt;/code&gt; to the post’s YAML front matter and you’re done.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/sample-link-post/&quot;&gt;Sample Link Post&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on August 12, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[A Post with a Video]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/video-post/" />
  <id>http://localhost:4000/articles/video-post</id>
  <published>2013-06-25T00:00:00-04:00</published>
  <updated>2013-06-25T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;//www.youtube.com/embed/pdSp4Y4GOQs&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

&lt;p&gt;Video embeds are responsive and scale with the width of the main content block with the help of &lt;a href=&quot;http://fitvidsjs.com/&quot;&gt;FitVids&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Not sure if this only effects Kramdown or if it’s an issue with Markdown in general. But adding YouTube video embeds causes errors when building your Jekyll site. To fix add a space between the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tags and remove &lt;code&gt;allowfullscreen&lt;/code&gt;. Example below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;560&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;315&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://www.youtube.com/embed/PWf4WUoMXwg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here’s a Vimeo embed for testing purposes.&lt;/p&gt;

&lt;iframe src=&quot;//player.vimeo.com/video/98146708?title=0&amp;amp;byline=0&quot; width=&quot;500&quot; height=&quot;281&quot; frameborder=&quot;0&quot;&gt; &lt;/iframe&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/video-post/&quot;&gt;A Post with a Video&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on June 25, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Post with Large Feature Image and Text]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/readability-feature-post/" />
  <id>http://localhost:4000/articles/readability-feature-post</id>
  <updated>2013-06-30T00:00:00-00:00</updated>
  <published>2013-05-23T00:00:00-04:00</published>
  
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;This is a sample post with a large feature image up top and tons of text. Odio ad blue bottle vinyl, 90’s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney’s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.&lt;/p&gt;

&lt;p&gt;Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.&lt;/p&gt;

&lt;h2 id=&quot;cupidatat-90s-lo-fi-authentic-try-hard&quot;&gt;Cupidatat 90’s lo-fi authentic try-hard&lt;/h2&gt;

&lt;p&gt;In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90’s. &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sartorial hoodie &lt;/li&gt;
  &lt;li&gt;Labore viral forage&lt;/li&gt;
  &lt;li&gt;Tote bag selvage &lt;/li&gt;
  &lt;li&gt;DIY exercitation et id ugh tumblr church-key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.&lt;/p&gt;

&lt;p&gt;Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven’t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney’s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.&lt;/p&gt;

&lt;h2 id=&quot;forage-occaecat-cardigan-qui&quot;&gt;Forage occaecat cardigan qui&lt;/h2&gt;

&lt;p&gt;Fashion axe hella gastropub lo-fi kogi 90’s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole. &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney’s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney’s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.&lt;/p&gt;

&lt;h2 id=&quot;hoodie-duis&quot;&gt;Hoodie Duis&lt;/h2&gt;

&lt;p&gt;Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90’s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.&lt;/p&gt;

&lt;h3 id=&quot;thundercats-ho&quot;&gt;Thundercats Ho!&lt;/h3&gt;

&lt;p&gt;Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney’s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.&lt;/p&gt;

&lt;p&gt;Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney’s selfies. Odd Future Banksy non authentic.&lt;/p&gt;

&lt;p&gt;Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/readability-feature-post/&quot;&gt;Post with Large Feature Image and Text&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on May 23, 2013.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[A Post with Images]]></title>
  <link rel="alternate" type="text/html" href="http://localhost:4000/articles/sample-post-images/" />
  <id>http://localhost:4000/articles/sample-post-images</id>
  <published>2013-05-22T00:00:00-04:00</published>
  <updated>2013-05-22T00:00:00-04:00</updated>
  <author>
    <name>Your Name</name>
    <uri>http://localhost:4000</uri>
    <email>you@email.com</email>
  </author>
  <content type="html">
    &lt;p&gt;Here are some examples of what a post with images might look like. If you want to display two or three images next to each other responsively use &lt;code&gt;figure&lt;/code&gt; with the appropriate &lt;code&gt;class&lt;/code&gt;. Each instance of &lt;code&gt;figure&lt;/code&gt; is auto-numbered and displayed in the caption.&lt;/p&gt;

&lt;h2 id=&quot;figures-for-images-or-video&quot;&gt;Figures (for images or video)&lt;/h2&gt;

&lt;h3 id=&quot;one-up&quot;&gt;One Up&lt;/h3&gt;

&lt;figure&gt;
	&lt;a href=&quot;http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_b.jpg&quot;&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8426/7758832526_cc8f681e48_c.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;&lt;a href=&quot;http://www.flickr.com/photos/80901381@N04/7758832526/&quot; title=&quot;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&quot;&gt;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;two-up&quot;&gt;Two Up&lt;/h3&gt;

&lt;p&gt;Apply the &lt;code&gt;half&lt;/code&gt; class like so to display two images side by side that share the same caption.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;half&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/images/image-filename-1.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/images/image-filename-2.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Caption describing these two images.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you’ll get something that looks like this:&lt;/p&gt;

&lt;figure class=&quot;half&quot;&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;
	&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;
	&lt;figcaption&gt;Two images.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;three-up&quot;&gt;Three Up&lt;/h3&gt;

&lt;p&gt;Apply the &lt;code&gt;third&lt;/code&gt; class like so to display three images side by side that share the same caption.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;figure&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;third&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://placehold.it/1200x600.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://placehold.it/600x300.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://placehold.it/1200x600.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://placehold.it/600x300.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://placehold.it/1200x600.jpg&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://placehold.it/600x300.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;alt=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;image&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;figcaption&amp;gt;&lt;/span&gt;Caption describing these three images.&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figcaption&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/figure&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you’ll get something that looks like this:&lt;/p&gt;

&lt;figure class=&quot;third&quot;&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;a href=&quot;http://placehold.it/1200x600.jpg&quot;&gt;&lt;img src=&quot;http://placehold.it/600x300.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/a&gt;
	&lt;figcaption&gt;Three images.&lt;/figcaption&gt;
&lt;/figure&gt;

    &lt;p&gt;&lt;a href=&quot;http://localhost:4000/articles/sample-post-images/&quot;&gt;A Post with Images&lt;/a&gt; was originally published by Your Name at &lt;a href=&quot;http://localhost:4000&quot;&gt;Taco Destroyer&lt;/a&gt; on May 22, 2013.&lt;/p&gt;
  </content>
</entry>

</feed>